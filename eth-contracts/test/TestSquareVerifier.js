// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require("verifier");
const zokratesProof = require("../../zokrates/code/square/proof.json");

contract("TestSquareVerifier", (accounts) => {
  describe("should work for correct and incorrect proof", function () {
    beforeEach(async function () {
      this.contract = await SquareVerifier.new();
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it("should verify wheb proof is correct", async function () {
      let result = await this.contract.verifyTx.call(
        ...Object.values(zokratesProof.proof),
        zokratesProof.inputs
      );
      assert.equal(result, true);
    });

    // Test verification with incorrect proof
    it("should not verify when proof is incorrect", async function () {
      let incorrectInputs = [
        "0x0000000000000000000000000000000000000000000000000000000000000111",
        "0x0000000000000000000000000000000000000000000000000000000000000222",
      ];
      let result = await this.contract.verifyTx.call(
        ...Object.values(zokratesProof.proof),
        incorrectInputs
      );
      assert.equal(result, false, "Error! proof is incorrect");
    });
  });
});
